{"version":3,"file":"static/js/346.2efec262.chunk.js","mappings":"iMAMA,MAkBA,EAlBgCA,IAE5BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAACC,EAAAA,GAAO,CAACC,KAAM,MACfF,EAAAA,EAAAA,KAAA,MAAIF,UAAU,aAAYC,SAAC,aAC3BC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,oBAAmBC,SAAC,wCAGjCF,EAAAA,EAAAA,MAACM,EAAAA,GAAI,CAACC,GAAG,MAAMN,UAAU,iBAAgBC,SAAA,EACvCC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,OAAMC,UACpBC,EAAAA,EAAAA,KAACK,EAAAA,EAAQ,CAACC,SAAS,iBAErBN,EAAAA,EAAAA,KAAA,QAAMF,UAAU,QAAOC,SAAC,e,4CCFhC,MAyEA,EAzE6BQ,KAE3B,MAAM,OAAEC,EAAM,QAAEC,EAAO,OAAEC,IAAWC,EAAAA,EAAAA,OAC7BC,EAAUC,IAAwBC,EAAAA,EAAAA,GAAqC,CAC5EC,MAAO,GACPC,SAAU,KAYZ,IATAC,EAAAA,EAAAA,YAAU,MACRC,EAAAA,EAAAA,MACe,cAAXV,GACFW,EAAAA,EAAAA,IAAa,UAAWV,GACJ,WAAXD,IACTW,EAAAA,EAAAA,IAAa,QAASV,EACxB,GACC,CAACA,EAASD,IAEE,cAAXA,EACF,OAAOR,EAAAA,EAAAA,KAACoB,EAAAA,GAAQ,CAAChB,GAAG,UAQtB,OACEP,EAAAA,EAAAA,MAAA,QACEC,UAAU,cACVuB,SARkBC,IACpBA,EAAMC,kBACNC,EAAAA,EAAAA,IAAqBZ,EAAS,EAMLb,SAAA,EAEvBC,EAAAA,EAAAA,KAACyB,EAAAA,GAAK,CACJC,KAAK,QACLC,KAAK,OACLC,MAAOhB,EAASG,MAChBc,SAAUhB,EACViB,WAAuB,YAAXtB,KAEdR,EAAAA,EAAAA,KAACyB,EAAAA,GAAK,CACJC,KAAK,WACLC,KAAK,WACLC,MAAOhB,EAASI,SAChBa,SAAUhB,EACViB,WAAuB,YAAXtB,KAEdR,EAAAA,EAAAA,KAAC+B,EAAAA,GAAiB,CAACC,MAAO,OAAQtB,OAAQA,KAC1Cb,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CACHC,GAAG,mBACHN,UAAU,uBAAsBC,SACjC,wBAIHF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASC,SAAA,EACtBC,EAAAA,EAAAA,KAACiC,EAAAA,GAAU,CACT7B,GAAG,WACHuB,KAAK,OACLrB,SAAS,SACTR,UAAU,YAAWC,SACtB,aACDC,EAAAA,EAAAA,KAACkC,EAAAA,GAAM,CACLP,KAAK,SACLrB,SAAS,SACTR,UAAU,gBACVqC,WAAuB,YAAX3B,EAAqBT,SAClC,iBAEE,EC/DX,EAf8BH,IACxBwC,EAAAA,EAAAA,MAEApC,EAAAA,EAAAA,KAACoB,EAAAA,GAAQ,CAAChB,GAAI,WAKhBP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAACqC,EAAY,KACbrC,EAAAA,EAAAA,KAACO,EAAU,M","sources":["pages/SigninPage/SigninHeader/SigninHeader.tsx","pages/SigninPage/SigninForm/SigninForm.tsx","pages/SigninPage/SigninPage.tsx"],"sourcesContent":["import React from 'react'\nimport './SigninHeader.css'\nimport { Link } from 'react-router-dom'\nimport { AppLogo } from 'components'\nimport { LazyIcon } from 'lazyUtils/LazyIcon/LazyIcon'\n\nconst SigninHeader: React.FC = (props) => {\n  return (\n    <div className='signin-header'>\n      <AppLogo size={60} />\n      <h3 className='form-label'>Sign in</h3>\n      <p className='-form-discription'>\n        sign in with existing creadintials\n      </p>\n      <Link to='../' className='link back-link'>\n        <span className='icon'>\n          <LazyIcon iconName='arrowBack' />\n        </span>\n        <span className='label'>Back</span>\n      </Link>\n    </div>\n  )\n}\n\nexport default SigninHeader\n","import React, { useEffect } from 'react'\nimport './SigninForm.css'\nimport { Navigate, Link } from 'react-router-dom'\nimport { Input } from 'components'\nimport { AnchorLink } from 'components'\nimport {\n  dispatchSigninAction,\n  useSigninSelector\n} from 'features/auth/signin'\nimport { dispatchRestSignoutState } from 'features/auth/signout'\nimport { DisplayFormErrors } from 'components'\nimport { useFormDataChange } from 'hooks/useFormDataChange'\nimport { SigninCredentials } from 'services/authServices'\nimport { Button } from 'components'\nimport { triggerToast } from 'features/toast'\n\nconst SigninForm: React.FC = () => {\n  \n  const { status, message, errors } = useSigninSelector()\n  const [formData, handleFormDataChange] = useFormDataChange<SigninCredentials>({\n    email: '',\n    password: ''\n  })\n\n  useEffect(() => {\n    dispatchRestSignoutState();\n    if (status === \"succeeded\") {\n      triggerToast(\"success\", message)\n    } else if (status === \"failed\") {\n      triggerToast(\"error\", message)\n    }\n  }, [message, status])\n\n  if (status === 'succeeded') {\n    return <Navigate to='/home' />\n  }\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    dispatchSigninAction(formData)\n  }\n\n  return (\n    <form\n      className='signin-form'\n      onSubmit={handleSubmit}\n    >\n      <Input\n        name='email'\n        type='text'\n        value={formData.email}\n        onChange={handleFormDataChange}\n        isDisabled={status === 'loading'}\n      />\n      <Input\n        name='password'\n        type='password'\n        value={formData.password}\n        onChange={handleFormDataChange}\n        isDisabled={status === 'loading'}\n      />\n      <DisplayFormErrors field={'none'} errors={errors} />\n      <div className='actions'>\n        <span></span>\n        <Link\n          to='/forgot-password'\n          className='forgot-password-link'\n        >\n          forgot password\n        </Link>\n      </div>\n      <div className='actions'>\n        <AnchorLink\n          to=\"/sign-up\"\n          type=\"link\"\n          iconName='signin'\n          className='sign-link'\n        >sign up</AnchorLink>\n        <Button\n          type='submit'\n          iconName='signin'\n          className='signin-button'\n          isLoaderOn={status === 'loading'}\n        >sign in</Button>\n      </div>\n    </form>\n  )\n}\n\nexport default SigninForm\n","import React from 'react';\nimport './SigninPage.css';\nimport { Navigate } from 'react-router-dom';\nimport { isAuthenticated } from 'utils';\nimport SigninHeader from './SigninHeader/SigninHeader';\nimport SigninForm from './SigninForm/SigninForm';\n\nconst SigninPage: React.FC = (props) => {\n  if (isAuthenticated()) {\n    return (\n      <Navigate to={'/home'} />\n    )\n  }\n\n  return (\n    <div className='signin-page'>\n      <SigninHeader />\n      <SigninForm />\n    </div>\n  )\n}\n\nexport default SigninPage\n"],"names":["props","_jsxs","className","children","_jsx","AppLogo","size","Link","to","LazyIcon","iconName","SigninForm","status","message","errors","useSigninSelector","formData","handleFormDataChange","useFormDataChange","email","password","useEffect","dispatchRestSignoutState","triggerToast","Navigate","onSubmit","event","preventDefault","dispatchSigninAction","Input","name","type","value","onChange","isDisabled","DisplayFormErrors","field","AnchorLink","Button","isLoaderOn","isAuthenticated","SigninHeader"],"sourceRoot":""}