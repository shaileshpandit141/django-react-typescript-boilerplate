/**
 * Button Component
 * @class .button
 * @description Primary button component with rounded corners and hover state
 * @props {CSS Custom Properties}
 * @prop --button-primary-background - Main background color
 * @prop --button-text-color - Text and icon color
 * @prop --button-primary-hover - Background color on hover/focus
 * @prop --transition - Animation timing for state changes
 */
.button {
    border: none;
    outline: none;
    border-radius: 999rem;
    background-color: var(--button-primary-background);
    color: var(--button-text-color);
    height: calc(40/16 * 1em);
    width: 100%;
    min-width: calc(40/16 * 1em);
    padding-block: calc(16/16 * 1em);
    padding-inline: calc(16/16 * 1em);
    display: flex;
    align-items: center;
    justify-content: center;
    column-gap: calc(4/16 * 1em);
    transition: var(--transition);
    user-select: none;

    &:hover,
    &:focus-visible {
        background-color: var(--button-primary-hover);
    }

    /**
     * Icon Container
     * @element .icon
     * @description Square container for button icons with centered content
     * @layout Maintains 1:1 aspect ratio
     */
    .icon {
        aspect-ratio: 1/1;
        height: calc(24/16 * 1em);
        width: calc(24/16 * 1em);
        display: flex;
        align-items: center;
        justify-content: center;
        color: inherit;
        overflow: hidden;

        span,
        svg {
            height: inherit;
            width: inherit;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }
    }

    /**
     * Text Label
     * @element .label
     * @description Button text container with standardized typography
     * @typography {
     *   size: 16px (1em),
     *   weight: 600,
     *   lineHeight: 24px (1.5),
     *   case: First letter capital
     * }
     */
    .label {
        font-size: calc(16/16 * 1em);
        font-weight: 600;
        line-height: calc(24/16 * 1em);
        white-space: nowrap;
        text-wrap: nowrap;
        text-transform: lowercase;

        &::first-letter {
            text-transform: capitalize;
        }

        span,
        svg {
            vertical-align: middle;
        }
    }
}

/**
 * Icon Button Variant
 * @class .button-as-icon
 * @description Square button for icon-only usage
 * @extends .button
 * @modifies {width, padding}
 */
.button-as-icon {
    width: calc(40/16 * 1em);
    padding-inline: 0;
}

/**
 * Link Component
 * @class .link
 * @description Button-styled anchor element
 * @extends .button styles
 * @inherits CSS custom properties from button
 */
.link {
    text-decoration: none;
    border-radius: 999rem;
    background-color: var(--button-primary-background);
    color: var(--button-text-color);
    height: calc(40/16 * 1em);
    width: 100%;
    min-width: calc(40/16 * 1em);
    padding-block: calc(16/16 * 1em);
    padding-inline: calc(16/16 * 1em);
    display: flex;
    align-items: center;
    justify-content: center;
    column-gap: calc(4/16 * 1em);
    cursor: default;
    transition: var(--transition);
    user-select: none;

    &:hover,
    &:focus-visible {
        background-color: var(--button-primary-hover);
    }

    /**
     * Icon Container
     * @element .icon
     * @description Matches button icon styling
     */
    .icon {
        aspect-ratio: 1/1;
        height: calc(24/16 * 1em);
        width: calc(24/16 * 1em);
        display: flex;
        align-items: center;
        justify-content: center;
        color: inherit;
        overflow: hidden;

        span,
        svg {
            height: inherit;
            width: inherit;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }
    }

    /**
     * Link Label
     * @element .label
     * @description Text styling matching button typography
     */
    .label {
        font-size: calc(16/16 * 1em);
        font-weight: 600;
        line-height: calc(24/16 * 1em);
        color: inherit;
        white-space: nowrap;
        text-wrap: nowrap;
        text-transform: lowercase;

        &::first-letter {
            text-transform: capitalize;
        }

        span,
        svg {
            vertical-align: middle;
        }
    }
}

/**
 * Icon Link Variant
 * @class .link-as-icon
 * @description Square link for icon-only content
 * @extends .link
 * @modifies {width, padding}
 */
.link-as-icon {
    width: calc(40/16 * 1em);
    padding-inline: 0;
}

/**
 * Interactive States
 * @media (pointer: fine)
 * @description Cursor and opacity rules for pointer devices
 * @states {
 *   default: pointer cursor,
 *   disabled: not-allowed cursor + 0.6 opacity
 * }
 */
@media (pointer: fine) {

    .button,
    .button-1-1 {
        cursor: pointer;
    }

    .button:disabled,
    .button-as-icon:disabled {
        cursor: not-allowed;
        opacity: 0.6;
    }

    .link,
    .link-as-icon {
        cursor: pointer;
    }
}
